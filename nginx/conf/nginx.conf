user  root;
worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
     include       mime.types;
     default_type  application/octet-stream;
     sendfile        on;
     keepalive_timeout  65;
        
        server {
        listen       8000;
        server_name  localhost;

        #charset koi8-r;
	charset utf-8;
        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        error_page  404              /404.html;

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
	location = /favicon.ico {
        log_not_found off;
        access_log off;
        } 
        }


	server {
        listen       8001;
	charset utf-8;
	location / {
	    default_type 'text/html';
	    set_by_lua $requesturl "return '192.168.1.41' ";
	    set_by_lua_block $query_url {
		local file1 = io.open("/usr/local/gateway/nginx/namenode.txt", "r")
                local str = string.gsub(file1:read("*a"), "\n", "")
                file1:close()
		return ngx.unescape_uri(str)
            }
	    access_by_lua_file 'conf/authorize2.lua';
	    proxy_pass $query_url;
        }
	location = /favicon.ico {
        log_not_found off;
        access_log off;
    	} 
        }


	server {
        listen       8002;
	charset utf-8;


        location /gateway/hdfs {
	    default_type 'text/html';
	    set_by_lua $requesturl "return '192.168.1.41' ";
            set_by_lua  $username  '
                local headers = ngx.req.get_headers()
                local base64user = headers["authorization"]
                local users
                if base64user ~= nil then
                   users=ngx.decode_base64(string.sub(base64user,7,string.len(base64user)))
                   local _ , _ , txt1 = string.find(users,"^".."(.-)"..":")
                   users=txt1
                else
                   ngx.log(ngx.ERR, "账号密码为空")
                end
                return users
            ';
	    if ( $username = "" ){
	    rewrite ^.*(/webhdfs/v1/.*)$ $1?user.name=$username break;
            access_by_lua_file 'conf/authorize1.lua';
            }
            if ( $username != "" ){
	    set_by_lua_block $query_url {
                local file1 = io.open("/usr/local/gateway/nginx/namenode.txt", "r")
                local str = string.gsub(file1:read("*a"), "\n", "")
                file1:close()
                str = str .. ngx.var.request_uri .. "&user.name=" .. ngx.var.username
		str = string.gsub(str, "/gateway/hdfs", "")
                ngx.log(ngx.ERR, "-------str: " .. str)
                return ngx.unescape_uri(str)
            }
	    #rewrite ^.*(/webhdfs/v1/.*)$ $1?user.name=$username break;
            access_by_lua_file 'conf/authorize1.lua';
	    proxy_pass $query_url;
            header_filter_by_lua '
		function replaces(bases)
                   bases = string.gsub(bases, "+", ":")
                   bases = string.gsub(bases, "/", ";")
                   bases = string.gsub(bases, "=", "_")
                   return bases
                end
                local ip_utils = require "lua_ip"
                local aes = require "resty.aes"
                local file1 = io.open("/usr/local/gateway/nginx/key.txt", "r")
                local str = string.gsub(file1:read("*a"), "\\n", "")
                file1:close()
                local iv = str
                local key = str
                local headers = ngx.req.get_headers()
                local base64user = headers["authorization"]
                local users
                if base64user ~= nil then
                   users=ngx.decode_base64(string.sub(base64user,7,string.len(base64user)))
                   local _ , _ , txt1 = string.find(users,"^".."(.-)"..":")
                   users=txt1
                end
                if (ngx.header.Location  ~= nil) then
                        local location =ngx.header.Location
                        local aes_128_cbc_with_iv = assert(aes:new(key, nil, aes.cipher(128, "cbc"), {iv=iv, method=nil}))
                        local encrypted = ngx.encode_base64(aes_128_cbc_with_iv:encrypt(location))
                        ngx.log(ngx.ERR, "#####encrypted: " .. location)
                        ngx.header.Location ="http://"..ip_utils.get_ipv4()..":8002/gateway/datanode/webhdfs/v1/?_="..replaces(encrypted)
                end
            ';

	    }

          }



         location /gateway/datanode {
            default_type 'text/html';
            resolver 127.0.0.1;
	    set_by_lua $requesturl "return '192.168.1.41' ";
	    set_by_lua $query_url "return 0";
	    access_by_lua_file 'conf/authorize3.lua';
            if ( $query_url != "" ){
		proxy_pass $query_url;
	    }

         }



	 location /gateway/Heartbeat {
          content_by_lua_block {
            local guids = "cb9c1a5b-6910-fb2f-457a-9c72a392d90d"
            local begin = ngx.now()
            local http = require "resty.http"
            local delay = 3
            local f
            local requestip = "192.168.1.41"
            f = function (premature)
                if premature then
                    return
                end
                local httpc = http.new()
                local res, err = httpc:request_uri("http://"..requestip..":8085/api/gateway/Heartbeat", {
                method = "POST",
                body = "requests=true&UUID="..guids,
                headers = {
                ["Content-Type"] = "application/x-www-form-urlencoded",
                      }
                })
                if (res.body~=nil) then
                local file = io.open("rule.txt", "w")
                file:write(res.body); -- 输入字符串
                file:close()-- 关闭文件
                end

                local res2, err = httpc:request_uri("http://"..requestip..":8085/api/gateway/Actives", {
                method = "POST",
                body = "UUID="..guids,
                headers = {
                ["Content-Type"] = "application/x-www-form-urlencoded",
                      }
                })
                if (res2.body~=nil) then
                local file = io.open("namenode.txt", "w")
                file:write(res2.body); -- 输入字符串
                file:close()-- 关闭文件
                end

                local ok, err = ngx.timer.at(delay, f)
                if not ok then
                    ngx.say("failed to set timer: ", err)
                    return
                end
            end
            local ok, err = ngx.timer.at(delay, f )
            if not ok then
                ngx.log(ngx.ERR, "failed to create the timer: ", err)
                return
            end
          }
        }
      

        }

     server { 
        listen       8005; 
	charset utf-8;
        location / { 
	    set_by_lua $requesturl "return '192.168.1.41' ";
	    set_by_lua_block $query_url {
                local file1 = io.open("/usr/local/gateway/nginx/hbase.txt", "r")
                local str = string.gsub(file1:read("*a"), "\n", "")
                file1:close()
                return ngx.unescape_uri(str)
            }
	    access_by_lua_file 'conf/authorize2.lua';
	    proxy_pass $query_url;
        } 
     }
}
