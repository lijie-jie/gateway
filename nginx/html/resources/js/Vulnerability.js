$(function(){
	// 点击展开系统漏洞
	$(document).on('click','.righttitle p',function(){
	    $(this).siblings('div').slideToggle();
	})
	// 点击展开系统信息
	$(document).on('click','.rightrowlist p',function(){
	    $(this).siblings('div').slideToggle();
	})
	// 系统信息加载数据
	function systemInformation(){
		// var post = $.post('/');
		// post.done(data){
			var data = [{Infortitle:'Dantanode节点信息',Datanodeinfo:'c1、c2、c3、c4、c5、c6、c7、c1、c2、c3、c4、c5、c6、c7、c1、c2、c3、c4、c5、c6、c7'},{Infortitle:'Dantanode节点信息',Datanodeinfo:'Datanodeinfo：c1、c2、c3、c4、c5、c6、c7'},{Infortitle:'Dantanode节点信息',Datanodeinfo:'Datanodeinfo：c1、c2、c3、c4、c5、c6、c7'},{Infortitle:'Dantanode节点信息',Datanodeinfo:'Datanodeinfo：c1、c2、c3、c4、c5、c6、c7'}]
			var allnum = data.length
			var arrRow=0;
			var arrList = 0;
			t = setInterval(function(){
				var strhtml = '<div class="rightrowlist">' +
	                  			'<p>'+data[arrRow].Infortitle+'<i class="zdyth"></i><b class="glyphicon glyphicon-menu-right"></b></p>'+
	                  		 	'<div>Datanodeinfo：'+data[arrRow].Datanodeinfo+'</div>' +
	                		  '</div>'
				$('.js-rightdataRow').append(strhtml);
				arrRow++
			 	if (arrRow>=allnum) {
			 		clearTimeout(t);
			 	};
			 }, 500);
		// }
   	}
	systemInformation();
	// 系统漏洞加载-----高危漏洞
	function Highloophole(){
		// var post = $.post('/');
		// post.done(data){
			var data = [
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'}
			]
			var allnum = data.length
			var arrRow=0;
			var arrList = 0;
			s = setInterval(function(){
				var strhtml  = '<div class="rowlist clearfix">'+
				                    '<div class="leftlabel">'+
				                        '<span class="gao">高危</span>'+
				                   	'</div>'+
                  					'<div class="righttitle">'+
                    					'<p>'+data[arrRow].loopholetitle+'<i class="glyphicon glyphicon-menu-right"></i></p>'+
                    					'<div><i>漏洞描述：</i>'+data[arrRow].loopholedetails+'</div>'+
                  					'</div>'+
                				'</div>'
				$('.js-loophole').append(strhtml);
				$('.js-high').html(1+arrRow++)
			 	if (arrRow>=allnum) {
			 		$('.paramimg').removeClass('on');
			 		timeorzer()
			 		clearTimeout(s);
			 	};
			 }, 500);
		// }
	}
	Highloophole();
	// 系统漏洞加载-----中危漏洞
	function inloophole(){
		// var post = $.post('/');
		// post.done(data){
			var data = [
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'}
			]
			var allnum = data.length
			var arrRow=0;
			var arrList = 0;
			i = setInterval(function(){
				var strhtml  = '<div class="rowlist clearfix">'+
				                    '<div class="leftlabel">'+
				                        '<span class="zhong">中危</span>'+
				                   	'</div>'+
                  					'<div class="righttitle">'+
                    					'<p>'+data[arrRow].loopholetitle+'<i class="glyphicon glyphicon-menu-right"></i></p>'+
                    					'<div><i>漏洞描述：</i>'+data[arrRow].loopholedetails+'</div>'+
                  					'</div>'+
                				'</div>'
				$('.js-loophole').append(strhtml);
				$('.js-in').html(1+arrRow++)
			 	if (arrRow>=allnum) {
			 		$('.yellowming').removeClass('on');
			 		timeorzer()
			 		clearTimeout(i);
			 	};
			 }, 500);
		// }
	}
	inloophole();
	// 系统漏洞加载-----低危漏洞
	function lowloophole(){
		// var post = $.post('/');
		// post.done(data){
			var data = [
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'},
				{loopholetitle:'CVE-2017-7669远程攻击漏洞',loopholedetails:'LinuContainerExecutor 以root用户身份运行docker命令输入验证不足，党docker功能启用时，经过身份验证的用户可以以root身份运行命令。'}
			]
			var allnum = data.length
			var arrRow=0;
			var arrList = 0;
			l = setInterval(function(){
				var strhtml  = '<div class="rowlist clearfix">'+
				                    '<div class="leftlabel">'+
				                        '<span class="di">低危</span>'+
				                   	'</div>'+
                  					'<div class="righttitle">'+
                    					'<p>'+data[arrRow].loopholetitle+'<i class="glyphicon glyphicon-menu-right"></i></p>'+
                    					'<div><i>漏洞描述：</i>'+data[arrRow].loopholedetails+'</div>'+
                  					'</div>'+
                				'</div>'
				$('.js-loophole').append(strhtml);
				$('.js-low').html(1+arrRow++)
			 	if (arrRow>=allnum) {
			 		$('.bluemimg').removeClass('on')
			 		timeorzer()
			 		clearTimeout(l);
			 	};
			 }, 500);
		// }
	}
	lowloophole();
	// 检测时间，扫描完成
	function timeorzer(){
		var highloophole = $('.highloophole')
		$.each(highloophole,function(){
			var has = $(this).find('div').hasClass('on');
			if(!has){
				$('.state').find('i').show();
				$('.state').find('b').show();
			}
		})
	}
	// 再次扫描
	$(document).on('click','.js-reset',function(){
		// 清空系统信息
		$('.js-rightdataRow').html(' ');
		// 清空系统漏洞
		$('.js-loophole').html(' ');
		var highloophole = $('.highloophole');
		$.each(highloophole,function(){
			$(this).find('div').addClass('on');
		})
		$('.state').find('i').hide();
		$('.state').find('b').hide();
		// 执行系统信息
		systemInformation();
		// 执行漏洞信息
		Highloophole();
		inloophole();
		lowloophole();
	});
});
